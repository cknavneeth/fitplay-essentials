
<%- include("../../views/layout/user/header",{user:user}) %>

<head>
    <title>Orders & Returns</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">


    <style>
        .dashboard body { /* Ensure body styles are scoped */
            font-family: Arial, sans-serif;
            background-color: #f5f5f5;
            margin: 0;
            padding: 0;
        }
        .dashboard .container {
            display: flex;
        }
        .dashboard .sidebar {
            width: 250px;
            height: 400px;
            background-color: #3f51b5;
            color: white;
            padding: 20px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        .dashboard .sidebar h2 {
            margin: 0;
            font-size: 18px;
        }
        .dashboard .sidebar p {
            margin: 5px 0 20px;
            font-size: 14px;
        }
        .dashboard .sidebar ul {
            list-style: none;
            padding: 0;
        }
        .dashboard .sidebar ul li {
            margin: 10px 0;
        }
        .dashboard .sidebar ul li a {
            color: white;
            text-decoration: none;
            display: flex;
            align-items: center;
            padding: 10px;
            border-radius: 5px;
            transition: background-color 0.3s;
        }
        .dashboard .sidebar ul li a:hover {
            background-color: #5c6bc0;
        }
        .dashboard .sidebar ul li a i {
            margin-right: 10px;
        }
        .dashboard .sidebar ul li a span {
            flex-grow: 1;
        }
        .dashboard .sidebar ul li a .amount {
            font-size: 14px;
        }
        .dashboard .content {
            flex-grow: 1;
            padding: 20px;
        }
        .dashboard .content .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background-color: white;
            padding: 10px 20px;
            border-radius: 5px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        .dashboard .content .header h1 {
            margin: 0;
            font-size: 18px;
        }
        .dashboard .content .header .tabs {
            display: flex;
        }
        .dashboard .content .header .tabs button {
            background-color: transparent;
            border: none;
            padding: 10px 20px;
            cursor: pointer;
            font-size: 14px;
            transition: background-color 0.3s;
        }
        .dashboard .content .header .tabs button:hover {
            background-color: #e0e0e0;
        }
        .dashboard .content .header .tabs .active {
            background-color: #e0e0e0;
            border-radius: 5px;
        }
        .dashboard .content .table-container {
            margin-top: 20px;
            background-color: white;
            border-radius: 5px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            padding: 10px;
        }
        .dashboard .content .table-container table {
            width: 100%;
            border-collapse: collapse;
        }
        .dashboard .content .table-container table th,
        .dashboard .content .table-container table td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #e0e0e0;
        }
        .dashboard .content .table-container table th {
            background-color: #f5f5f5;
        }



        .order-images {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
}

.image-box {
    width: 60px;
    height: 60px;
    border: 1px solid #ddd;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: #f9f9f9;
    margin-bottom: 5px;
}

.image-box img {
    width: 100%;
    height: auto;
    object-fit: cover;
}



/* Custom button size */
.btn-sm {
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
    line-height: 1.25;
}

/* Align buttons side by side */
td .btn {
    margin-right: 20px;
    margin-top: 10px; /* Space between buttons */
}


.modal-content {
  border-radius: 8px; /* Rounded corners */
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1); /* Soft shadow for depth */
}

.modal-header .close {
  color: #333;
}

#orderDetailsModal p {
  margin-bottom: 10px;
}

.order-detail-box {
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 15px;
    background-color: #f9f9f9;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  }

  .pagination-nav {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 10px 0;
    background-color: #f8f9fa; /* Light background */
    border-top: 1px solid #dee2e6;
}

.pagination-link {
    display: inline-block;
    margin: 0 5px;
    padding: 8px 12px;
    font-size: 14px;
    text-decoration: none;
    color: #007bff;
    border: 1px solid #007bff;
    border-radius: 4px;
    transition: background 0.3s, color 0.3s;
}

.pagination-link:hover {
    background: #007bff;
    color: #fff;
}

.pagination-link.active {
    background: #007bff;
    color: #fff;
    font-weight: bold;
    pointer-events: none;
}





/* General table styling */
.table-container table {
    width: 100%;
    border-collapse: collapse;
    text-align: left;
}

/* Hide unnecessary columns for smaller screens */
@media (max-width: 768px) {
    /* Hide specific columns */
    .table-container table th:nth-child(1), /* Order ID */
    .table-container table th:nth-child(3), /* Date */
    .table-container table th:nth-child(5), /* Address */
    .table-container table th:nth-child(7), /* Payment Method */
    .table-container table th:nth-child(8), /* Payment Status */
    .table-container table td:nth-child(1),
    .table-container table td:nth-child(3),
    .table-container table td:nth-child(5),
    .table-container table td:nth-child(7),
    .table-container table td:nth-child(8) {
        display: none;
    }

    /* Ensure important details are visible */
    .table-container table th, 
    .table-container table td {
        font-size: 12px;
        padding: 8px 5px;
    }

    /* Adjust the layout to fit smaller screens */
    .table-container table {
        display: block;
        overflow-x: auto;
    }

    /* Make action buttons easier to click */
    .btn {
        font-size: 10px;
        padding: 5px 8px;
        margin: 2px;
    }
}

/* For very small screens (mobile-first tweaks) */
@media (max-width: 576px) {
    .table-container table th,
    .table-container table td {
        font-size: 10px;
        padding: 4px 5px;
    }

    /* Hide product images if the screen is too small */
    .order-images {
        display: none;
    }

    /* Prioritize key details */
    .table-container table th:nth-child(6), /* Grand Total */
    .table-container table th:nth-child(9), /* Order Status */
    .table-container table th:nth-child(10), /* Action Buttons */
    .table-container table td:nth-child(6),
    .table-container table td:nth-child(9),
    .table-container table td:nth-child(10) {
        display: table-cell;
    }
}

/* Table headers for smaller screens */
.table-container table thead {
    background-color: #f5f5f5;
}

.table-container table tbody tr {
    border-bottom: 1px solid #ddd;
}

/* Buttons for modal and actions */
.btn {
    cursor: pointer;
    font-size: 12px;
    padding: 8px 10px;
    right: 20px;
}

    </style>
    
</head>
<body>
    <div class="dashboard">
    <div style="margin-right: 20rem;" class="container">
        <div class="sidebar">
            <h2><%= user.username %></h2>
            <p><%= user.email %></p> <!-- Replace with the actual field for phone number -->
            <ul>
                <li><a href="#"><i class="fas fa-box"></i> <span>Orders & Returns</span></a></li>
                <li><a href="/contact"><i class="fas fa-user"></i> <span>My Profile</span></a></li>
                <li><a href="/wallet"><i class="fas fa-wallet"></i> <span>Wallet</span> <span class="amount">â‚¹ 0</span></a></li>
                <li><a href="#"><i class="fas fa-gift"></i> <span>Sporty Rewards</span> <span class="amount">-</span></a></li>
                <li><a href="/address"><i class="fas fa-map-marker-alt"></i> <span>Address</span></a></li>
                <li><a href="#"><i class="fas fa-sign-out-alt"></i> <span>Logout</span></a></li>
            </ul>
        </div>

        <script>
            // Add this at the top of your script
            const userId = '<%= user._id %>'; // Assuming user object is passed to the template
        </script>

        <div class="content">
            <div class="header">
                <h1>Orders & Returns</h1>
                <div class="tabs">
                    <button class="active">ONLINE ORDER</button>
                    <button>STORE ORDER</button>
                </div>
            </div>
            <div class="table-container">
                <form action="/orders/update" method="POST">
                    <table>
                        <thead>
                            <tr>
                                <th>Order ID</th>
                                <th>Product Image</th>
                                <th>Date</th>
                                <th>Total Price</th>
                                <th>address</th>
                                <th>Grand Total</th>
                                <th>Payment</th>
                                <th>Status</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% if (orders.length > 0) { %>
                                <% orders.forEach(order => { %>
                                    <tr>
                                        <td><%= order.oid %></td>
                                        <td>
                                            <div class="order-images">
                                                <% if (order.items && order.items.length > 0) { %>
                                                    <% order.items.forEach(item => { %>
                                                        <div class="image-box">
                                                            <img src="/uploads/product-images/<%= item.image %>" alt="Product Image">
                                                        </div>
                                                    <% }); %>
                                                <% } else { %>
                                                    <div class="image-box">
                                                        <img src="/uploads/product-images/placeholder.png" alt="No Product Image">
                                                    </div>
                                                <% } %>
                                            </div>
                                        </td>
                                        <td><%= new Date(order.orderDate).toLocaleDateString() %></td>
                                        <td>â‚¹<%= order.items.reduce((acc, item) => acc + item.totalPrice, 0).toFixed(2) %></td>
                                        <td><%= order.fullAddress %></td>
                                        <td>â‚¹<%= order.grandTotal %></td>
                                        <td><span><%= order.paymentMethod || 'N/A' %></span></td>
                                        <td><span><%=order.paymentStatus|| 'N/A'%> </span></td>
                                        <td><span><%= order.orderStatus || 'N/A' %></span></td>
                                        <td>
                                            <input type="hidden" name="orderId" value="<%= order._id %>">
                                        
                                            <% if (order.orderStatus === 'Delivered') { %>
                                                <button type="button" class="btn btn-primary return-btn" data-order-id="<%= order._id %>">Return</button>
                                                <a href="/invoice/<%= order._id %>" class="btn btn-danger btn-sm ml-2"> Invoice</a>
                                            <% } else if (order.paymentStatus === 'Completed'&&order.orderStatus!=='Cancelled') { %>
                                                <button type="button" class="btn btn-primary cancel-btn" data-order-id="<%= order._id %>">Cancel</button>
                                                <a href="/invoice/<%= order._id %>" class="btn btn-danger btn-sm ml-2"> Invoice</a>
                                            <% } else if (order.orderStatus === 'Processing' && order.paymentStatus === 'Failed') { %>
                                                <button type="button" class="pay-again-btn"
                                                    data-order-id="<%= order._id %>"
                                                    data-address="<%= order.fullAddress %>"
                                                    data-user-id="<%= order.user._id %>"
                                                    data-grand-total="<%= order.grandTotal %>">
                                                    Pay Again
                                                </button>
                                            <% } else if (order.orderStatus === 'Pending' || order.orderStatus === 'Processing') { %>
                                                <button type="button" class="btn btn-primary cancel-btn" data-order-id="<%= order._id %>">Cancel</button>
                                            <% } else if (order.orderStatus === 'Cancelled') { %>
                                                <button type="button" class="btn btn-secondary" disabled>Cancelled</button>
                                            <% } else if (order.orderStatus === 'Returned') { %>
                                                <button type="button" class="btn btn-secondary" disabled>Returned</button>
                                            <% } else { %>
                                                <span>N/A</span>
                                            <% } %>
                                        </td>
                                        
                                        
                                        
                                    
                                        <!--order details-->
                                        <td>
                                            <button 
                                            type="button" 
                                            class="btn btn-info" 
                                            data-order-id="<%= order._id %>" 
                                            data-order-items='<%= JSON.stringify(order.items) %>' 
                                            data-order-total="<%= order.grandTotal %>" 
                                            data-order-address="<%= order.fullAddress %>" 
                                            onclick="showOrderDetails(this)"
                                            
                                        >
                                        Details
                                        </button>
                                        
                                        </td>
                                        
                                    </tr>
                                    
                                <% }); %>
                            <% } else { %>
                                <tr>
                                    <td colspan="7">No orders found.</td>
                                </tr>
                            <% } %>
                        </tbody>
                        
                        
                        

                    </table>
                </form>

                <!--for madal-->
                <div class="modal fade" id="orderDetailsModal" tabindex="-1" aria-labelledby="orderDetailsModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content">
                            <!-- Modal Header -->
                            <div class="modal-header" style="background-color: #e9f7ef;">
                                <h5 class="modal-title" id="orderDetailsModalLabel" style="font-weight: bold; color: #28a745;">
                                    <i class="fas fa-check-circle" style="color: #28a745; margin-right: 8px;"></i>Order Details
                                </h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                
                            <!-- Modal Body -->
                            <div class="modal-body" style="font-family: Arial, sans-serif;">
                                <p><strong>Order ID:</strong> <span id="orderId" style="color: #333;"></span></p>
                                <p><strong>Address:</strong> <span id="orderAddress" style="color: #555;"></span></p>
                                <p><strong>Items:</strong></p>
                                <div id="orderItems" style="margin-bottom: 15px; padding-left: 15px; color: #555; font-size: 14px;">
                                    <!-- Item details will be inserted here dynamically -->
                                </div>
                                <p><strong>Total Amount:</strong> â‚¹<span id="orderTotal" style="font-size: 18px; font-weight: bold; color: #333;"></span></p>
                            </div>
                
                            <!-- Modal Footer -->
                            <div class="modal-footer" style="background-color: #f8f9fa;">
                                <button type="button" class="btn btn-primary" onclick="continueShopping()">Continue Shopping</button>
                            </div>
                        </div>
                    </div>
                </div>
                
                  
                <!--for modal-->

                <!--for pagination-->
                <nav class="pagination-nav">
                    <% if (currentPage > 1) { %>
                        <a href="?page=<%= currentPage - 1 %>&limit=<%= limit %>" class="pagination-link">Previous</a>
                    <% } %>
                
                    <% for (let i = 1; i <= totalPages; i++) { %>
                        <a href="?page=<%= i %>&limit=<%= limit %>" 
                           class="pagination-link <%= currentPage === i ? 'active' : '' %>">
                            <%= i %>
                        </a>
                    <% } %>
                
                    <% if (currentPage < totalPages) { %>
                        <a href="?page=<%= currentPage + 1 %>&limit=<%= limit %>" class="pagination-link">Next</a>
                    <% } %>
                </nav>
                
                  
                
                <!--for pagination-->
            </div>
        </div>
    </div>
    </div>

    <script> function continueShopping() {
        window.location.href = '/shop';  // Replace with your shop page URL
      }</script>

<link href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" rel="stylesheet">


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>




<script>
    document.addEventListener('DOMContentLoaded',function(){
        document.querySelectorAll('.cancel-btn').forEach(button=>{
            button.addEventListener('click',function(){
                const orderId=this.getAttribute('data-order-id')
                const cancelButton=this

                Swal.fire({
                    title: 'Are you sure?',
                    text: "Do you want to cancel this order?",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Yes, cancel it!'
                }).then((result)=>{
                         if(result.isConfirmed){
                            fetch(`/cancel-order/${orderId}`,{
                                method:"POST",
                                headers: {
                                   'Content-Type': 'application/json'
                                }
                            })
                            .then((response)=>response.json())
                            .then(data=>{
                                if(data.success){
                                    cancelButton.classList.remove('btn-primary');
                                    cancelButton.classList.add('btn-secondary');
                                    cancelButton.textContent = 'Cancelled';
                                    cancelButton.disabled = true;


                                    Swal.fire('Cancelled!', 'Your order has been cancelled.', 'success');
                                }
                            })
                            .catch((error)=>{
                                 console.error(error)
                            })
                         }
                })
            })
        })
    })
</script>



<script>
    document.addEventListener('DOMContentLoaded', () => {
        document.querySelectorAll('.return-btn').forEach(button => {
            button.addEventListener('click', async (event) => {
                const orderId = event.target.getAttribute('data-order-id');
                
                // Display SweetAlert confirmation dialog
                const confirmation = await Swal.fire({
                    title: 'Are you sure?',
                    text: "Do you want to return this product?",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, return it!',
                    cancelButtonText: 'Cancel'
                });

                // Proceed only if confirmed
                if (confirmation.isConfirmed) {
                    console.log('Return confirmed for order:', orderId);
                    
                    try {
                        const response = await fetch(`/returnProduct/${orderId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        });
                        const result = await response.json();
                        if (result.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Return request sent!',
                                text: 'The product will be collected after verification.'
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error while returning',
                                text: 'Please try again. Sorry for the inconvenience.'
                            });
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Unexpected Error',
                            text: 'Something went wrong. Please try again later.'
                        });
                    }
                } else {
                    console.log('Return cancelled for order:', orderId);
                }
            });
        });
    });
</script>

<!-- Bootstrap CSS -->
<link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">




<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>




<script>
    document.addEventListener('DOMContentLoaded',()=>{
        const payAgainButton=document.querySelectorAll('.pay-again-btn')

        payAgainButton.forEach(button=>{
            button.addEventListener('click',async (event)=>{
               const orderId=event.target.getAttribute('data-order-id')
               const grandTotal=event.target.getAttribute('data-grand-total')
               const fullAddress = event.target.getAttribute('data-address');
               const userId = event.target.getAttribute('data-user-id');
               const paymentMethod = 'razorpay';

               try {
                const response=await fetch('/order',{
                method:'post',
                headers:{
                    'Content-Type':'application/json'
                },
                body:JSON.stringify({
                    amount: grandTotal,  
                    currency: 'INR',
                    orderId, 
                })
               })

               const data = await response.json();
               if(data.order_id){
                var razorpayOptions={
                    key: data.key_id,
                            amount: data.amount,
                            currency: data.currency,
                            name: "",
                            description: "",
                            order_id: data.order_id,
                            handler: function(response) {
                                // Handle the success response from Razorpay
                                console.log('/paymentCapture response==============>', response)
                                fetch('/paymentCapture', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({
                                        razorpayPaymentId: response.razorpay_payment_id,
                                        razorpayOrderId: response.razorpay_order_id,
                                        razorpaySignature: response.razorpay_signature,
                                        address: fullAddress,
                                        // items: cartItems,  
                                        userId:userId, 
                                        paymentMethod: paymentMethod,
                                        totalAmount: grandTotal,
                                        retry:true,
                                        orderId, 

                                    })
                                })
                                .then(res => res.json())
                                .then(paymentData => {
                                    console.log('succes aketh',paymentData)
                                    if (paymentData.success) {
                                        console.log('status ok akunnunto')
                                        Swal.fire({
                                            icon: 'success',
                                            title: 'Order Placed Successfully',
                                            text: paymentData.message,
                                            confirmButtonText: 'View Order'
                                        })
//                                                                    
                            .then(() => {
            // Reload the page with a delay to allow modal display
            setTimeout(() => {
                console.log("Reloading page after payment success");
                location.reload();
            }, 1000); // Delay before reload (2 seconds)
        });
                                        
                                    }else {
                                    
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Order Failed',
                                            text: paymentData.error
                                        });
                                    }
                                })
                                .catch(error => {
                                    console.error('Payment verification failed:', error);
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Order Error',
                                        text: 'There was an error completing the payment. Please try again.'
                                    });
                                });
                            },
                            theme: {
                                color: "#3399cc"
                            }
                }
                
                const rzp = new Razorpay(razorpayOptions);
                        rzp.open();
                 }
               } catch (error) {
                console.error(error)
               }
               


            })
        })
    })
</script>



<!--for view detailed page-->
<script>
function showOrderDetails(button) {
    const orderId = button.getAttribute("data-order-id");
    const orderItems = JSON.parse(button.getAttribute("data-order-items"));
    const orderTotal = button.getAttribute("data-order-total");
    const userAddress = button.getAttribute("data-order-address"); // User's address

    // Populate modal fields
    document.getElementById("orderId").textContent = orderId;

    // Populate order items
    const orderItemsContainer = document.getElementById("orderItems");
    orderItemsContainer.innerHTML = ""; // Clear previous items

    orderItems.forEach(item => {
        const itemElement = document.createElement("div");
        itemElement.style.display = "flex";
        itemElement.style.alignItems = "center";
        itemElement.style.marginBottom = "10px";

        // Create image element
        const imgElement = document.createElement("img");
        imgElement.src = `/uploads/product-images/${item.productId.productImage}`;
        imgElement.alt = item.productName;
        imgElement.style.width = "50px";
        imgElement.style.height = "50px";
        imgElement.style.marginRight = "10px";
        imgElement.style.borderRadius = "5px";

        // Create text element
        const textElement = document.createElement("span");
        textElement.textContent = `${item.productName} - â‚¹${item.totalPrice} (${item.quantity} pcs)`;

        itemElement.appendChild(imgElement);
        itemElement.appendChild(textElement);
        orderItemsContainer.appendChild(itemElement);
    });

    // Set user address
    document.getElementById("orderAddress").textContent = userAddress;

    // Set total amount
    document.getElementById("orderTotal").textContent = orderTotal;

    
    const orderDetailsModal = new bootstrap.Modal(document.getElementById("orderDetailsModal"));
    orderDetailsModal.show();
}

function continueShopping() {
    window.location.href = "/shop"; 
}

</script>

</body>






<%- include("../../views/layout/user/footer") %>


