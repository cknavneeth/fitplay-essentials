<%- include("../../views/layout/user/header",{user:user}) %>
<style>
    .modal-content {
  border-radius: 8px; /* Rounded corners */
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1); /* Soft shadow for depth */
}

.modal-header .close {
  color: #333;
}

#orderDetailsModal p {
  margin-bottom: 10px;
}

.order-detail-box {
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 15px;
    background-color: #f9f9f9;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  }

</style>
	<body>	
        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">

		<div id="page_item_area">
			<div class="container">
				<div class="row">
					<div class="col-sm-6 text-left">
						<h3>Checkout</h3>
					</div>        
					<div class="col-sm-6 text-right">
						<ul class="p_items">
							<li><a href="/">Home</a></li>
							<li><a href="/shop">Category</a></li>
							<li><span>Checkout</span></li>
						</ul>                    
					</div>    
				</div>
			</div>
		</div>

        <script>
            // Add this at the top of your script
            const userId = '<%= user._id %>'; // Assuming user object is passed to the template
        </script>
		
		<!-- Checkout Page -->
		<section class="checkout_page">
			<div class="container">
				<div class="row">
					<!-- Cart Items Section -->
					<div class="col-md-6">
						<div class="title">
							<h3>Review Your Cart</h3>
						</div>
						<div class="cart-items">
							<% cartItems.forEach(item => { %>
								<div class="cart-item">
									<img src="/uploads/product-images/<%= item.image %>" alt="<%= item.productName %>" style="width: 100px; height: 100px; object-fit: cover;" />

									<p><strong>Product:</strong> <%= item.productName %></p>
									<p><strong>Price:</strong> Rs<%= item.price %></p>
									<p><strong>Quantity:</strong> <%= item.quantity %></p>
									<p><strong>Total:</strong> Rs<%= item.price * item.quantity %></p>
								</div>
								<hr>
							<% }) %>
						</div>
					</div>
					
					<!-- Address Selection Section -->
					<div class="col-md-6">
						<div class="title">
							<h3>Select Shipping Address</h3>
						</div>
						<form action="/checkout/cod" method="POST">
							<div class="address-selection">
								<% addresses.forEach(address => { %>
									<div class="address-card">
										<input type="radio" 
										name="selectedAddress" 
										value="<%= address._id %>" 
										required 
										<% if (user.defaultAddress && user.defaultAddress.toString() === address._id.toString()) { %>
											checked
										<% } %>
								 >
										<p><strong>Name:</strong> <%= address.name %></p>
										<p><strong>Address:</strong> <%= address.address %>, <%= address.city %>, <%= address.state %>, <%= address.zip %></p>
										<p><strong>Phone:</strong> <%= address.mobile %></p>

										<button type="button" onclick="location.href='/checkouteditaddress/<%= address._id %>'" class="btn btn-secondary">
											Edit
										</button>
									</div>
									<hr>
								<% }) %>
							</div>
							
							
							<!-- Order Summary Section -->
							<div class="title">
								<h3>Your Order</h3>
							</div>
							<div>
								<table class="table">
									<tr>
										<th>Subtotal</th>
										<td>Rs <%= subTotal %></td>
									</tr>
									<tr>
										<th>Discount</th>
										<td>Rs <%= discount %></td>
									</tr>
									<tr>
										<th>Grand Total</th>
										
                                        <td id="grandTotal" data-grand-total="<%= grandTotal %>">Rs <%= grandTotal %></td>
									</tr> 
								</table>
							</div>

                            <script>
                                const grandTotal = '<%= grandTotal %>';
                                console.log("Grand Total:", grandTotal);
                            </script>
                            
							
							<!-- Payment Methods Section -->
							<div class="payment_method">           
								<ul>
									<li>
										<div class="custom-control custom-radio">
											<input type="radio" id="bankTransfer" name="paymentMethod" value="bank" class="custom-control-input" required>
											<label class="custom-control-label" for="bankTransfer">Direct Bank Transfer</label>
										</div>                        
									</li>
									<li>
										<div class="custom-control custom-radio">
											<input type="radio" id="razorpay" name="paymentMethod" value="razorpay" class="custom-control-input" required>
											<label class="custom-control-label" for="razorpay">Razorpay</label>
										</div>    
									</li>
									<li>
										<div class="custom-control custom-radio">
											<input type="radio" id="cashOnDelivery" name="paymentMethod" value="cash" class="custom-control-input" required>
											<label class="custom-control-label" for="cashOnDelivery">Cash on Delivery</label>
										</div>    
									</li>
									<li>
										<div class="custom-control custom-radio">
											<input type="radio" id="wallet" name="paymentMethod" value="wallet" class="custom-control-input" required>
											<label class="custom-control-label" for="wallet">Wallet</label>
										</div>    
									</li>
									
								</ul>     
							</div>


							<div class="add-address mb-2">
								<button type="button" onclick="location.href='/checkoutAddress'" class="btn btn-primary">
									Add New Address
								</button>
							</div>
							
							<!-- Place Order Button -->
							<div class="qc-button">
								<button id="proceedToPayment" type="submit" class="btn border-btn" onclick="placeOrder(event)">Place Order</button>
							</div>
							
						</form>
					</div>
				</div>
			</div>




            <!--for modal-->
<!-- Bootstrap Modal for Order Details with Custom Styles -->
<div class="modal fade" id="orderDetailsModal" tabindex="-1" aria-labelledby="orderDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <!-- Modal Header with Green Success Icon -->
        <div class="modal-header" style="background-color: #e9f7ef;">
          <h5 class="modal-title" id="orderDetailsModalLabel" style="font-weight: bold; color: #28a745;">
            <i class="fas fa-check-circle" style="color: #28a745; margin-right: 8px;"></i>Order Placed Successfully
          </h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
  
        <!-- Modal Body with Order Details -->
        <div class="modal-body"  class="order-detail-box" style="font-family: Arial, sans-serif;">
          <p><strong>Order ID:</strong> <span id="orderId" style="color: #333;"></span></p>
          
          <p><strong>Items:</strong></p>
          <div id="orderItems" style="margin-bottom: 15px; padding-left: 15px; color: #555; font-size: 14px;">
            <!-- Item details will be inserted here dynamically -->
          </div>
  
          <p><strong>Total Amount:</strong> Rs <span id="orderTotal" style="font-size: 18px; font-weight: bold; color: #333;"></span></p>
        </div>
  
        <!-- Modal Footer with Continue Shopping Button -->
        <div class="modal-footer" style="background-color: #f8f9fa;">
          <button type="button" class="btn btn-primary" onclick="continueShopping()">Continue Shopping</button>
        </div>
      </div>
    </div>
  </div>
  



  
		</section>
        <script> function continueShopping() {
            window.location.href = '/shop';  // Replace with your shop page URL
          }</script>
		
        <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
		<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

		<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

       
        

		<script>

// function placeOrder(event) {
//     event.preventDefault(); 
//     const selectedPaymentMethod = document.querySelector('input[name="paymentMethod"]:checked');
//     const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');

//     // Check if an address is selected
//     if (!selectedAddress) {
//         Swal.fire({
//             icon: 'error',
//             title: 'Selection Error',
//             text: 'Please select both a payment method and an address.'
//         });
//         return;
//     }
//     const paymentMethod=selectedPaymentMethod.value
//     const address = selectedAddress.value;
//     console.log(address);

//     Swal.fire({
//         title: 'Confirm Order',
//         text: "Do you want to place the order?",
//         icon: 'warning',
//         showCancelButton: true,
//         confirmButtonText: 'Yes, place it!',
//         cancelButtonText: 'No, cancel!'
//     }).then((result) => {
//         if (result.isConfirmed) {
//             fetch('/checkout/cod', {
//                 method: 'POST',
//                 headers: {
//                     'Content-Type': 'application/json'
//                 },
//                 body: JSON.stringify({
//                     address: address,
// 					paymentMethod:paymentMethod
//                 }) // Closing brace for JSON.stringify
//             })
//             .then(response => response.json())
//             .then(data => {
//                 if (data.success) {
//                     Swal.fire({
//                         icon: 'success',
//                         title: 'Order Placed Successfully',
//                         text: data.message,
//                         confirmButtonText: 'View Order'
//                     }).then(() => {
// 						if(data.cartEmpty){
// 						Swal.fire({
// 							icon:'info',
// 							title:'Your cart is empty',
// 							text:'successfully placed Order,your cart is empty ',
// 							confirmButtonText:'Go To Cart'

// 						}).then(()=>{
// 							window.location.href='/cart'
// 						})
// 					}else{
// 						window.location.href = `/order/success/${data.orderId}`;
// 					}
                      
//                     });
//                 } else {
//                     Swal.fire({
//                         icon: 'error',
//                         title: 'Order Failed',
//                         text: data.error
//                     });
//                 }
//             })
//             .catch(error => {
//                 console.error('Error:', error);
//                 Swal.fire({
//                     icon: 'error',
//                     title: 'Order Error',
//                     text: 'There was an error placing your order. Please try again.'
//                 });
//             });
//         }
//     });
// }






// const cartItems = [
//     { price: 200, quantity: 2 }, // Example item 1
//     { price: 100, quantity: 1 }  // Example item 2
// ];


// let grandtotal = cartItems.reduce((total, item) => total + item.price * item.quantity, 0);
// console.log('Grandtotal:', grandtotal);



async function placeOrder(event) {
    event.preventDefault(); // Prevent form submission
    
    const selectedPaymentMethod = document.querySelector('input[name="paymentMethod"]:checked');
    const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');


   

    // Check if both payment method and address are selected
    if (!selectedAddress || !selectedPaymentMethod) {
        Swal.fire({
            icon: 'error',
            title: 'Selection Error',
            text: 'Please select both a payment method and an address.'
        });
        return;
    }

    const paymentMethod = selectedPaymentMethod.value;
    const address = selectedAddress.value;

    // Confirm the order
    Swal.fire({
        title: 'Confirm Order',
        text: "Do you want to place the order?",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, place it!',
        cancelButtonText: 'No, cancel!'
    }).then(async (result) => {
        if (result.isConfirmed) {
            if (paymentMethod === 'razorpay') {
                // Call backend to create Razorpay order
                try {
                    console.log('ivde keruvo')
                    const response = await fetch('/order', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ amount:grandTotal, currency: 'INR' })
                    });
                    const data = await response.json();
                    
                    if (data.order_id) {
                        // Proceed with Razorpay payment
                        const razorpayOptions = {
                            key: data.key_id,
                            amount: data.amount,
                            currency: data.currency,
                            name: "",
                            description: "",
                            order_id: data.order_id,
                            handler: function(response) {
                                // Handle the success response from Razorpay
                                console.log('/paymentCapture response==============>', response)
                                fetch('/paymentCapture', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({
                                        razorpayPaymentId: response.razorpay_payment_id,
                                        razorpayOrderId: response.razorpay_order_id,
                                        razorpaySignature: response.razorpay_signature,
                                        address: address,
                                        // items: cartItems,  
                                        userId, 
                                        paymentMethod: paymentMethod,
                                        totalAmount: grandTotal
                                    })
                                })
                                .then(res => res.json())
                                .then(paymentData => {
                                    console.log('succes aketh',paymentData)
                                    if (paymentData.status === 'ok') {
                                        console.log('status ok akunnunto')
                                        Swal.fire({
                                            icon: 'success',
                                            title: 'Order Placed Successfully',
                                            text: paymentData.message,
                                            confirmButtonText: 'View Order'
                                        }).then(() => {
                                            document.getElementById('orderId').textContent = paymentData.orderId;
      document.getElementById('orderItems').innerHTML = paymentData.items
        .map(item => `<div>${item.productName} (x${item.quantity}) - RS${item.totalPrice}</div>`)
        .join('');
      document.getElementById('orderTotal').textContent = paymentData.grandTotal 

      // Show the modal with order details
      $('#orderDetailsModal').modal('show');  
                            });

                                    } else {
                                    
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Order Failed',
                                            text: paymentData.error
                                        });
                                    }
                                })
                                .catch(error => {
                                    console.error('Payment verification failed:', error);
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Order Error',
                                        text: 'There was an error completing the payment. Please try again.'
                                    });
                                });
                            },
                            theme: {
                                color: "#3399cc"
                            }
                        };

                        const rzp = new Razorpay(razorpayOptions);
                        rzp.open();
                        //for payment failures
                        rzp.on('payment.failed', function (response) {
                            console.error('Payment failed:', response.error);
                            const paymentId = response.error?.metadata?.payment_id || "Missing Payment ID";
                            const orderId = response.error?.metadata?.order_id || "Missing Order ID";
                            // Save the failed order details
                            fetch('/saveFailedOrder', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({
                                    razorpayPaymentId: paymentId,
                                    razorpayOrderId: orderId,
                                    razorpaySignature: response.razorpay_signature || "Missing Signature",
                                        address: address,
                                        // items: cartItems,  
                                        userId, 
                                        paymentMethod: paymentMethod,
                                        totalAmount: grandTotal
                                })
                            })
                                .then(res => res.json())
                                .then(saveResponse => {
                                    console.log("Save Response:", saveResponse);
                                    if (saveResponse.success) {
                                        Swal.fire({
                                            icon: 'info',
                                            title: 'Payment Failed',
                                            text: 'Order saved with failed payment status. Please try again.'
                                        });
                                    } else {
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Order Save Failed',
                                            text: saveResponse.error
                                        });
                                    }
                                })
                                .catch(error => {
                                    console.error('Error saving failed order:', error);
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Error',
                                        text: 'Could not save order details. Please contact support.'
                                    });
                                });
                        });
                        //for payment failures
                    } else {
                        
                        Swal.fire({
                            icon: 'error',
                            title: 'Order Creation Failed',
                            text: data.error
                        });
                    }
                } catch (error) {
                    
                    console.error('Error creating Razorpay order:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Order Error',
                        text: 'There was an error placing your order. Please try again.'
                    });
                }
            } else {
                // COD or wallet payment
                fetch('/checkout/cod', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        address: address,
                        paymentMethod: paymentMethod
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Order Placed Successfully',
                            text: data.message,
                            confirmButtonText: 'Cart is empty'
                        }).then(() => {
                            window.location.href ='/cart';
                        });
                    } else {
                
                        Swal.fire({
                            icon: 'error',
                            title: 'Order Failed',
                            text: data.error
                        });
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Order Error',
                        text: 'There was an error placing your order. Please try again.'
                    });
                });
            }
        }
    });
}
 
 </script>

 </script>

		<%- include("../../views/layout/user/footer") %>



	